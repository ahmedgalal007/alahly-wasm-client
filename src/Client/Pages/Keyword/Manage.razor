@page "/keyword/manage"
@using System.Collections.ObjectModel;
@using FSH.BlazorWebAssembly.Client.Components.EntityTable;

@attribute [MustHavePermission(FSHAction.View, FSHResource.Keywords)]

@inject IStringLocalizer<Manage> L
@*@inject IBrandsClient BrandsClient*@
@* @inject IKeywordClient KeywordClient *@

<FshTitle Title="@L["Keywords"]" Description="@L["Manage Keywords."]" />

<EntityTable TEntity="KeywordTableRow" TId="Guid" TRequest="UpdateKeywordRequest" Context="@Context">
    @*<ActionsContent>
         <MudMenu Label="@L["Actions"]" Variant="Variant.Filled" DisableElevation="true"
                 EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary" AnchorOrigin="Origin.TopLeft"
                 TransformOrigin="Origin.TopLeft">
            @if (Context.CanUpdateEntityFunc(context))
            {
                <MudMenuItem @onclick="@(() => InvokeModal(context))">@L["Edit"]</MudMenuItem>
            }
            @if (Context.CanDeleteEntityFunc(context))
            {
                <MudMenuItem Style="color:red!important" @onclick="@(() => Delete(context))">@L["Delete"]</MudMenuItem>
            }
            @if (Context.HasExtraActionsFunc is not null )
            {
                // @ExtraActions(context)
            }
        </MudMenu>
    </ActionsContent>*@
    <ExtraActions>
        <MudButton Variant="Variant.Filled" DisableElevation="true" EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary"
                OnClick="@(() => ShowBtnPress(context.Id))">@((context.ShowDetails == true) ? L["Hide"] : L["Show"]) @L["Trail Details"]</MudButton>

    </ExtraActions>
    <EditFormContent>
        <MudGrid>
        @if (!Context.AddEditModal.IsCreate)
        {
            <MudItem xs="12" md="12">
                <MudTextField Value="context.Id" ReadOnly DisableUnderLine Label="@L[$"Keyword Id"]" />
            </MudItem>
        }
        @* <MudItem xs="12" md="6">
        <MudTextField T="string" For="@(() => context.Title)" @bind-Value="context.Title" Label="@L["Title"]" />
        </MudItem>
        <MudItem xs="12" md="12">
        <MudHidden For="@(() => context.DefaultCultureCode)" @bind-Value="CurrentLanguage"></MudHidden>
        </MudItem> *@


        @* @for (int i = 0; i < ActiveTranslations.Count -1; i++) *@

        <MudItem xs="12" md="3">
            <MudCheckBox @bind-Checked="context.IsOrganization" @onblur="ForceRender" @onchange="ForceRender">
                @nameof(context.IsOrganization)
            </MudCheckBox>
        </MudItem>
        <MudItem xs="12" md="3">
            <MudCheckBox @bind-Checked="context.IsEvent" @onblur="ForceRender" @onchange="ForceRender">
                @nameof(context.IsEvent)
            </MudCheckBox>
        </MudItem>
        <MudItem xs="12" md="3">
            <MudCheckBox @bind-Checked="context.IsPerson" @onblur="ForceRender" @onchange="ForceRender">
                @nameof(context.IsPerson)
            </MudCheckBox>
        </MudItem>
        <MudItem xs="12" md="3">
            <MudCheckBox @bind-Checked="context.IsPlace" @onblur="ForceRender" @onchange="ForceRender">
                @nameof(context.IsPlace)
            </MudCheckBox>
        </MudItem>
        <MudItem xs="12" md="3">
            <MudCheckBox @bind-Checked="context.IsProduct" @onblur="ForceRender" @onchange="ForceRender">
                @nameof(context.IsProduct)
            </MudCheckBox>
        </MudItem>

        <MudItem xs="12" md="12" Class="me-4">
                <KeywordLocals TItem="LocalizedKeywordDto" Context="local" Items="context.Locals" OnAddLanguage="OnAddLanguage" OnUpdateLocal="OnUpdateLocals">
                    <MudItem xs="12" Class="ma-4">
                        <MudTextField Label="@L["Title"]"
                                      Disabled="@(local.Enabled? false : true)"
                                      @bind-Value="local.Title" Variant="Variant.Outlined"
                                      TextChanged="@(e => UpdateTextItem(local, e))"
                                      Immediate="true" Counter="25" MaxLength="25" />
                    </MudItem>
                    <MudItem xs="12" Class="ma-4">
                        @* <MudTextField Label="@L["Description"]" @bind-Value="local.Description" TextChanged="@(e => UpdateTextItem(local, e))"></MudTextField> *@
                        <MudTextField @ref="multilineReference" T="string" Label="@L["Description"]" Lines="3"
                                      Disabled="@(local.Enabled? false : true)"
                                      @bind-Value="local.Description" Variant="Variant.Outlined"
                                      TextChanged="@(e => UpdateTextItem(local, e))"
                                      Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Api" OnAdornmentClick="@(() => multilineReference.SelectRangeAsync(5, 10))" />
                    </MudItem>
                </KeywordLocals>
        </MudItem>

        </MudGrid>
    </EditFormContent>
    <ChildRowContent>
        @if (context.ShowDetails)
        {
             <MudTr>
                    <MudCard Elevation="25" style="margin: 10px !important;">
                        <MudText>Row Contents</MudText>
                    </MudCard>
             </MudTr>
        }
    </ChildRowContent>
</EntityTable>

@code
{
    private MudTextField<string> multilineReference;
    private RenderFragment<KeywordTableRow>? FieldTemplate => keyword => __builder =>
    {
            <MudItem>
            <MudChip Icon="@Icons.Material.Filled.Watch" IconColor="Color.Secondary" Label="true" Color="Color.Surface"> @L["Title"] : @keyword.Locals?.FirstOrDefault()?.Title</MudChip>
            </MudItem>
            <MudItem>
            <MudChip Icon="@Icons.Material.Filled.Watch" IconColor="Color.Secondary" Label="true" Color="Color.Surface"> @L["Culture"] :  @keyword.Locals?.FirstOrDefault()?.CulturCode</MudChip>
        </MudItem>
    };
    // LocalizedKeyword item = new LocalizedKeyword();
    // ICollection<LocalizedKeyword> locals = new List<LocalizedKeyword>();

    void OnAddLanguage(LocalizedKeywordDto item)
    {

    }

    Task OnUpdateLocals(LocalizedKeywordDto item)
    {
        AddUpdateItemToModel(Context, item);
        // if (Context.AddEditModal.RequestModel.Locals == null)
        //     Context.AddEditModal.RequestModel.Locals = new List<LocalizedKeyword>();
        // foreach (var item in items)
        // {
        //     Context.AddEditModal.RequestModel.Locals.Add(item);
        // }

        //// Context.AddEditModal.RequestModel.Locals = items.Adapt<ICollection<LocalizedKeyword>>();
        return Task.CompletedTask;
    }

    Task UpdateTextItem(LocalizedKeywordDto item, string value)
    {
        // item.Title = value;
        AddUpdateItemToModel(Context, item);
        return Task.CompletedTask;
    }

    private static void AddUpdateItemToModel(EntityTableContext<KeywordTableRow, Guid, UpdateKeywordRequest> Context, LocalizedKeywordDto item)
    {
        if (Context.AddEditModal.RequestModel.Locals == null)
            Context.AddEditModal.RequestModel.Locals = new List<LocalizedKeywordDto>();
        var loc = Context.AddEditModal.RequestModel.Locals.Where(e => e.CulturCode == item.CulturCode).FirstOrDefault();
        if (loc == null)
        {
            // item.KeywordId = Context.AddEditModal.RequestModel.Id;
            Context.AddEditModal.RequestModel.Locals.Add(item);

            // loc = Context.AddEditModal.RequestModel.Locals.Last();
            // Context.AddEditModal.BuildAdapter();
        }
        else
        {
            // If new and disabled remove the item
            if (!loc.Enabled && (loc.Id == default || loc.Id == Guid.Empty))
            {
                Context.AddEditModal.RequestModel.Locals
                    .Remove(Context.AddEditModal.RequestModel.Locals.FirstOrDefault(e => e.CulturCode == loc.CulturCode)!);
            }
            else
            {
                loc.Title = item.Title;
                loc.Description = item.Description;
                loc.Enabled = item.Enabled;
                loc.IsDefault = item.IsDefault;
            }
        }
    }
}