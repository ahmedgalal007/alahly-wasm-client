@page "/keyword/manage"
@using System.Collections.ObjectModel;
@attribute [MustHavePermission(FSHAction.View, FSHResource.Keywords)]

@inject IStringLocalizer<Manage> L
@inject IBrandsClient BrandsClient
@inject IKeywordClient KeywordClient

<FshTitle Title="@L["Keywords"]" Description="@L["Manage Keywords."]" />

<EntityTable TEntity="KeywordDto" TId="Guid" TRequest="UpdateKeywordRequest" Context="@Context">

    <EditFormContent >
        @if (!Context.AddEditModal.IsCreate)
        {
            <MudItem xs="12" md="6">
                <MudTextField Value="context.Id" ReadOnly DisableUnderLine Label="@L[$"Keyword Id"]" />
            </MudItem>
        }
        @* <MudItem xs="12" md="6">
            <MudTextField T="string" For="@(() => context.Title)" @bind-Value="context.Title" Label="@L["Title"]" />
        </MudItem>
        <MudItem xs="12" md="12">
            <MudHidden For="@(() => context.DefaultCultureCode)" @bind-Value="CurrentLanguage"></MudHidden>
        </MudItem> *@
        
        
        @* @for (int i = 0; i < ActiveTranslations.Count -1; i++) *@
        <MudItem xs="12" md="12">
        <MudPaper Class="pa-16 ma-2" Elevation="3">
        <MudTabs Elevation="4" Rounded="true" Color="@Color.Secondary" >
            @foreach (var item in ActiveTranslations)
            {
                <MudTabPanel Text="@item.Name">
                    <MudCheckBox @bind-Checked="@item.Active" @onblur="ForceRender" @onchange="ForceRender">@item.Name</MudCheckBox>
                </MudTabPanel>
            }
        </MudTabs>
        </MudPaper>
        </MudItem>
        <br/>
        @* @for (int i = 0; i < ActiveTranslations.Count() -1; i++) *@
        @foreach (var translation in ActiveTranslations)
        {
            <MudItem xs="12" md="4">
            <MudText>@translation.Active</MudText>
            </MudItem>
        }
    </EditFormContent>

</EntityTable>

@code
{
    protected EntityServerTableContext<KeywordDto, Guid, UpdateKeywordRequest> Context { get; set; } = default!;

    protected override void OnInitialized()
    {
        Context = new(
            entityName: L["Keyword"],
            entityNamePlural: L["Keywords"],
            entityResource: FSHResource.Keywords,
            fields: new()
                {
                new(keyword => keyword.Id, L["Id"], "Id"),
                new(keyword => keyword.IsOrganization, L["Organization"], "Organization"),
                },
            idFunc: keyword => keyword.Id ?? Guid.NewGuid(),
            searchFunc: async filter => (await KeywordClient
                .SearchAsync(filter.Adapt<SearchKeywordRequest>()))
                .Adapt<PaginationResponse<KeywordDto>>(),
            createFunc: async keyword => await KeywordClient.CreateAsync(keyword.Adapt<CreateKeywordRequest>()),
            updateFunc: async (id, keyword) => await KeywordClient.UpdateAsync(id, keyword),
            deleteFunc: async id => await KeywordClient.DeleteAsync(id),
            exportAction: string.Empty);



        foreach (var language in LocalizationConstants.SupportedLanguages.OrderBy( e => e.Order))
        {
            // if (language.Code == CurrentLanguage)
            // {
            // context.DefaultCultureCode = CurrentLanguage;
            // }
            // if (!ActiveTranslations.Any(e => e.Code == language.Code))
            // {
            ActiveTranslations.Add(new() { Name = language.DisplayName, Code = language.Code, Active = language.Code == CurrentLanguage });
            // }
        }

    }



    public string? CurrentLanguage { get; set; } = "ar-EG";
    // [Parameter] public Dictionary<string, bool> ActiveTranslations { get; set; } = new Dictionary<string, bool>();
    public List<LanguageItem> ActiveTranslations { get; set; } = new List<LanguageItem>();

    protected override async Task OnInitializedAsync()
    {
        var currentPreference = await ClientPreferences.GetPreference() as ClientPreference;
        if (currentPreference != null)
        {
            CurrentLanguage = currentPreference.LanguageCode;
        }
        else
        {
            CurrentLanguage = "ar-EG";
        }

    }

    private void SwitchLang(string lang)
    {
        CurrentLanguage = lang;
    }

    private void ForceRender(EventArgs e)
    {
        Context.AddEditModal.ForceRender();
    }

    [JSInvokable]
    private  void ToggleLanguage(ChangeEventArgs e)
    {
        StateHasChanged();
    }


    public class LanguageItem
    {
        public string Code { get; set; }
        public string Name { get; set; }
        public bool Active { get; set; }
    }
}